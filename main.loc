module monad (*)

type Py => Maybe a = "Optional[$1]" a
type Py => Either a b = "Union[$1,$2]" a b

packMaybe   :: pack   => [a] -> Maybe a
unpackMaybe :: unpack => Maybe a -> [a]

maybe :: b -> (a -> b) -> Maybe a -> b
catMaybes :: [Maybe a] -> [a]
isJust :: Maybe a -> Bool
isNothing :: Maybe a -> Bool
fromJust :: Maybe a -> a -- unsafe
just :: a -> Maybe a
nothing :: Maybe a

-- ultimately, this should be replaced with a Monad typeclass
bindMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b

packEither   :: pack   => ([a],[b]) -> Either a b
unpackEither :: unpack => Either a b -> ([a],[b])

lefts :: [Either a b] -> [a]
rights :: [Either a b] -> [b]
left :: a -> Either a b
right :: b -> Either a b
isLeft :: Either a b -> Bool
isRight :: Either a b -> Bool

bindEither :: Either a b -> (b -> Either a c) -> Either a c
